import { useState, useEffect, useRef } from "react";
import SongDisplay from "@/components/SongDisplay";
import ControlPanel from "@/components/ControlPanel";

const Index = () => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [speed, setSpeed] = useState(50);
  const [activeLineIndex, setActiveLineIndex] = useState(0);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  // –î–µ–º–æ-—Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
  const songText = `Intro:
Am F C G

–ö—É–ø–ª–µ—Ç 1:
Am                F
–í —Ç–µ–º–Ω–æ—Ç–µ –Ω–æ—á–Ω–æ–π –¥–æ—Ä–æ–≥–∏
C                 G
–°–≤–µ—Ç—è—Ç —Ñ–∞—Ä—ã –≤–ø–µ—Ä–µ–¥–∏
Am                F
–ú—ã —Å —Ç–æ–±–æ–π –∏–¥–µ–º –∫ –ø–æ—Ä–æ–≥—É
C                 G
–ù–æ–≤–æ–≥–æ –ø—É—Ç–∏

–ü—Ä–∏–ø–µ–≤:
F                 C
–ò –ø—É—Å—Ç—å –≤–µ—Å—å –º–∏—Ä –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å
G                 Am
–ú—ã –Ω–∞–π–¥–µ–º —Å–≤–æ–π –∑–≤–µ–∑–¥–Ω—ã–π —á–∞—Å
F                 C
–í —Å–µ—Ä–¥—Ü–µ –º—É–∑—ã–∫–∞ –∑–≤—É—á–∏—Ç
G                 Am
–ù–∞—à–∞ –ø–µ—Å–Ω—è –≥–æ–≤–æ—Ä–∏—Ç

–ö—É–ø–ª–µ—Ç 2:
Am                F
–°—Ç—Ä—É–Ω—ã –≥–∏—Ç–∞—Ä—ã –ø–æ—é—Ç —Ç–∏—Ö–æ
C                 G
–û –ª—é–±–≤–∏ –∏ –æ –º–µ—á—Ç–∞—Ö
Am                F
–í –∫–∞–∂–¥–æ–º –∞–∫–∫–æ—Ä–¥–µ –µ—Å—Ç—å –ª–∏—Ö–æ
C                 G
–ò –ø–µ—á–∞–ª—å –≤ –Ω–∞—à–∏—Ö —Å–µ—Ä–¥—Ü–∞—Ö

–ü—Ä–∏–ø–µ–≤:
F                 C
–ò –ø—É—Å—Ç—å –≤–µ—Å—å –º–∏—Ä –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å
G                 Am
–ú—ã –Ω–∞–π–¥–µ–º —Å–≤–æ–π –∑–≤–µ–∑–¥–Ω—ã–π —á–∞—Å
F                 C
–í —Å–µ—Ä–¥—Ü–µ –º—É–∑—ã–∫–∞ –∑–≤—É—á–∏—Ç
G                 Am
–ù–∞—à–∞ –ø–µ—Å–Ω—è –≥–æ–≤–æ—Ä–∏—Ç

Bridge:
Dm                G
–í—Ä–µ–º—è –ª–µ—Ç–∏—Ç –∫–∞–∫ –≤–µ—Ç–µ—Ä
C                 Am
–ù–µ –¥–æ–≥–Ω–∞—Ç—å –µ–≥–æ —Ä—É–∫–æ–π
Dm                G
–ù–æ –ø–æ–∫–∞ –º—ã –≤–º–µ—Å—Ç–µ
C                 Am
–ú–∏—Ä –Ω–∞–ø–æ–ª–Ω–µ–Ω –∫—Ä–∞—Å–æ—Ç–æ–π

Outro:
Am F C G (x2)`;

  const songLines = songText.split("\n").filter((line) => line.trim() !== "");

  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(
        () => {
          setActiveLineIndex((prev) => {
            if (prev < songLines.length - 1) {
              return prev + 1;
            }
            return prev;
          });
        },
        (110 - speed) * 50,
      ); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isPlaying, speed, songLines.length]);

  const handleTogglePlay = () => {
    setIsPlaying(!isPlaying);
  };

  const handleSpeedChange = (newSpeed: number) => {
    setSpeed(newSpeed);
  };

  const handleReset = () => {
    setIsPlaying(false);
    setActiveLineIndex(0);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white font-mono">
      <div className="container mx-auto px-4 py-6">
        <header className="text-center mb-6">
          <h1 className="text-3xl font-bold text-purple-400 mb-2">
            üé∏ –ì–∏—Ç–∞—Ä–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫
          </h1>
          <p className="text-gray-400">
            –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
          </p>
        </header>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <div className="lg:col-span-3">
            <SongDisplay
              lines={songLines}
              activeLineIndex={activeLineIndex}
              scrollContainerRef={scrollContainerRef}
            />
          </div>

          <div className="lg:col-span-1">
            <ControlPanel
              isPlaying={isPlaying}
              speed={speed}
              onTogglePlay={handleTogglePlay}
              onSpeedChange={handleSpeedChange}
              onReset={handleReset}
              activeLineIndex={activeLineIndex}
              totalLines={songLines.length}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Index;
